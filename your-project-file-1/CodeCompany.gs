function processLatestFile() {
  const sheet = SpreadsheetApp.getActive().getSheetByName("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏™‡∏´‡∏Å‡∏¥‡∏à‡∏®‡∏∂‡∏Å‡∏©‡∏≤");
  const folderId = "1wQ1ZwGADlj6XRmyl13jPucVMTOo8Sh_a"; // ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Google Drive ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
  const folder = DriveApp.getFolderById(folderId);

  const lastRow = sheet.getLastRow();
  if (lastRow < 2) return;

  const filePath = sheet.getRange(lastRow, 6).getValue(); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå F
  const fileName = getCleanFileName(filePath);

  const targetCell = sheet.getRange(lastRow, 9); // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå I
  insertLink(folder, fileName, targetCell);
}

function getCleanFileName(filePath) {
  if (!filePath) return "";
  const parts = filePath.toString().split("_Files_/");
  return parts.length > 1 ? parts[1].trim() : filePath.trim();
}

function insertLink(folder, fileName, targetCell) {
  if (!fileName) {
    targetCell.setValue("");
    return;
  }

  const files = folder.getFilesByName(fileName);
  if (files.hasNext()) {
    const file = files.next();
    const fileUrl = `https://drive.google.com/file/d/${file.getId()}/view`;
    targetCell.setFormula(`=HYPERLINK("${fileUrl}", "${fileName}")`);
  } else {
    targetCell.setValue("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå");
  }
}


// üîπ ‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
function getCleanFileName(filePath) {
  const parts = filePath.split("_Files_/");
  return parts.length > 1 ? parts[1] : filePath;
}



function updateInitialStatus() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£");
  const lastRow = sheet.getLastRow();

  for (let i = 2; i <= lastRow; i++) {
    const a = sheet.getRange(i, 1).getValue()?.toString().trim();    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A
    const q = sheet.getRange(i, 17).getValue()?.toString().trim();   // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Q
    const r = sheet.getRange(i, 18).getValue()?.toString().trim();   // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå R
    const uCell = sheet.getRange(i, 21);  // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå U
    const tCell = sheet.getRange(i, 20);  // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå T

    const u = uCell.getValue()?.toString().trim();
    const t = tCell.getValue()?.toString().trim();

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© ‡πÅ‡∏•‡∏∞ A ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡∏ï‡∏±‡πâ‡∏á Pending Approval
    if (a && (!u || u === "")) {
      uCell.setValue("Pending Approval");
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Q ‡πÅ‡∏•‡∏∞ R ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô Pending Approval ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô Under Review
    const updatedU = uCell.getValue()?.toString().trim();
    if (a && q && r && updatedU === "Pending Approval") {
      uCell.setValue("Under Review");
    }

    // ‡∏ñ‡πâ‡∏≤ U ‡πÄ‡∏õ‡πá‡∏ô Under Review ‚Üí T ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á)
    const refreshedU = uCell.getValue()?.toString().trim();
    if (refreshedU === "Under Review" && t !== "‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥") {
      tCell.setValue("‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥");
    }
  }
}


function onEdit(e) {
  const sheet = e.range.getSheet();
  const sheetName = sheet.getName();
  const cell = e.range;

  // üü¢ ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏ä‡∏µ‡∏ï "‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏™‡∏´‡∏Å‡∏¥‡∏à"
  if (sheetName === "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£") {
    const row = cell.getRow();
    const col = cell.getColumn();
    const editedValue = cell.getValue();

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏ä‡∏∑‡πà‡∏≠ / Email 
    const codeColumn = 17; // Q
    const nameColumn = 18; // R

    const importSheet = e.source.getSheetByName("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå");
    const importData = importSheet.getRange(2, 1, importSheet.getLastRow() - 1, 2).getValues(); // A:B

    if (col === codeColumn && editedValue) {
      const found = importData.find(r => r[0] === editedValue);
      sheet.getRange(row, nameColumn).setValue(found ? found[1] : "");
    }

    if (col === nameColumn && editedValue) {
      const found = importData.find(r => r[1] === editedValue);
      sheet.getRange(row, codeColumn).setValue(found ? found[0] : "");
    }
  }
}


